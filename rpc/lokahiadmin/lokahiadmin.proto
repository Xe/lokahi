syntax = "proto3";

// lokahiadmin is the administrative/backend API for lokahi power usage.
package github.xe.lokahi.admin;
option go_package = "lokahiadmin";

service RunLocal {
  rpc Checks(CheckIDs) returns (Run);
}

message CheckIDs {
  repeated string ids = 1;
}

// HealthCheck is a pseudo-service that runs HTTP health checks.
service HealthCheck {
  rpc Run(RunRequest) returns (Health);
}

// RunRequest is a request for a healthcheck being run.
message RunRequest {
  Check check = 1;
  string run_id = 2;
}

message Health {
    string url = 1;
    int64 response_time_nanoseconds = 2;
    int32 status_code = 3;
    string body = 4;
    string error = 5;
    bool healthy = 6;
}

message Run {
  string id = 1;
  CheckIDs cids = 2;
  bool finished = 3;
  map<string, Health> results = 4;
  int64 start_time_unix = 5;
  int64 elapsed_nanoseconds = 6;
}

message Nil{}

// Check is the database check structure.
// https://github.com/Xe/lokahi/blob/master/internal/database/check.go
message Check {
  int32 id = 1;
  string uuid = 2;
  int64 created_at_unix = 3;
  int64 edited_at_unix = 4;
  string url = 5;
  string webhook_url = 6;
  int32 every = 7;
  string playbook_url = 8;
  string state = 9;
}

message WebhookData {
  string run_id = 1;
  Check check = 2;
  Health health = 3;
}

// Webhook executes HTTP webhooks. This is expected to be run asynchronously.
service Webhook {
  rpc Execute(WebhookData) returns (Nil);
}

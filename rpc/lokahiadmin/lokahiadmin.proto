syntax = "proto3";

// lokahiadmin is the administrative/backend API for lokahi power usage.
package github.xe.lokahi.admin;
option go_package = "lokahiadmin";

// Health is a pseudo-service that runs HTTP health checks. This is exposed over
// the nats queue `check.run`.
service Health {
  rpc Run(RunRequest) returns (ServiceHealth);
}

// RunRequest is a request for a healthcheck being run.
message RunRequest {
  Check check = 1;
  string run_id = 2;
}

// Check is the database check structure.
// https://github.com/Xe/lokahi/blob/master/internal/database/check.go
message Check {
  int32 id = 1;
  string uuid = 2;
  int64 created_at_unix = 3;
  int64 edited_at_unix = 4;
  string url = 5;
  string webhook_url = 6;
  int32 every = 7;
  string playbook_url = 8;
  string state = 9;
}

// ServiceHealth is the health of a relevant service.
message ServiceHealth {
  string url = 1;
  int64 response_time_nanoseconds = 2;
  int32 status_code = 3;
  string error = 4;
  bool healthy = 5;
}

// Webhook is a pseudo-service that executes HTTP webhooks. This is exposed over
// the nats queue `webhook.egress`.
service Webhook {
  rpc Execute(WebhookRequest) returns (Nil);
}

// Nil is nothing as a type :D
message Nil{}

// WebhookRequest contains all of the information needed for webhookworker to
// execute a webhook.
message WebhookRequest {
  string run_id = 1;
  Check check = 2;
  ServiceHealth health = 3;
}
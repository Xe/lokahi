// This code was autogenerated from lokahiadmin.proto, do not edit.
package lokahiadmin

import (
	"context"
	"log"
	"time"

	"github.com/golang/protobuf/proto"
	nats "github.com/nats-io/go-nats"
	"github.com/rapidloop/nrpc"
)

// RunLocalServer is the interface that providers of the service
// RunLocal should implement.
type RunLocalServer interface {
	Checks(ctx context.Context, req CheckIDs) (resp Run, err error)
}

// RunLocalHandler provides a NATS subscription handler that can serve a
// subscription using a given RunLocalServer implementation.
type RunLocalHandler struct {
	ctx    context.Context
	nc     nrpc.NatsConn
	server RunLocalServer
}

func NewRunLocalHandler(ctx context.Context, nc nrpc.NatsConn, s RunLocalServer) *RunLocalHandler {
	return &RunLocalHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *RunLocalHandler) Subject() string {
	return "github.xe.lokahi.admin.RunLocal.>"
}

func (h *RunLocalHandler) Handler(msg *nats.Msg) {
	var encoding string
	var noreply bool
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"github.xe.lokahi.admin", 0, "RunLocal", 0, msg.Subject)
	if err != nil {
		log.Printf("RunLocalHanlder: RunLocal subject parsing failed: %v", err)
		return
	}

	ctx := h.ctx
	// call handler and form response
	var resp proto.Message
	var replyError *nrpc.Error
	switch name {
	case "Checks":
		_, encoding, err = nrpc.ParseSubjectTail(0, tail)
		if err != nil {
			log.Printf("ChecksHanlder: Checks subject parsing failed: %v", err)
			break
		}
		var req CheckIDs
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("ChecksHandler: Checks request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					innerResp, err := h.server.Checks(ctx, req)
					if err != nil {
						return nil, err
					}
					return &innerResp, err
				})
			if replyError != nil {
				log.Printf("ChecksHandler: Checks handler failed: %s", replyError.Error())
			}
		}
	default:
		log.Printf("RunLocalHandler: unknown name %q", name)
		replyError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}


	if !noreply {
		// encode and send response
		err = nrpc.Publish(resp, replyError, h.nc, msg.Reply, encoding) // error is logged
	} else {
		err = nil
	}
	if err != nil {
		log.Println("RunLocalHandler: RunLocal handler failed to publish the response: %s", err)
	}
}

type RunLocalClient struct {
	nc      nrpc.NatsConn
	PkgSubject string
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewRunLocalClient(nc nrpc.NatsConn) *RunLocalClient {
	return &RunLocalClient{
		nc:      nc,
		PkgSubject: "github.xe.lokahi.admin",
		Subject: "RunLocal",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *RunLocalClient) Checks(req CheckIDs) (resp Run, err error) {

	subject := c.PkgSubject + "." + c.Subject + "." + "Checks"

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

// HealthServer is the interface that providers of the service
// Health should implement.
type HealthServer interface {
	Run(ctx context.Context, req RunRequest) (resp ServiceHealth, err error)
}

// HealthHandler provides a NATS subscription handler that can serve a
// subscription using a given HealthServer implementation.
type HealthHandler struct {
	ctx    context.Context
	nc     nrpc.NatsConn
	server HealthServer
}

func NewHealthHandler(ctx context.Context, nc nrpc.NatsConn, s HealthServer) *HealthHandler {
	return &HealthHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *HealthHandler) Subject() string {
	return "github.xe.lokahi.admin.Health.>"
}

func (h *HealthHandler) Handler(msg *nats.Msg) {
	var encoding string
	var noreply bool
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"github.xe.lokahi.admin", 0, "Health", 0, msg.Subject)
	if err != nil {
		log.Printf("HealthHanlder: Health subject parsing failed: %v", err)
		return
	}

	ctx := h.ctx
	// call handler and form response
	var resp proto.Message
	var replyError *nrpc.Error
	switch name {
	case "Run":
		_, encoding, err = nrpc.ParseSubjectTail(0, tail)
		if err != nil {
			log.Printf("RunHanlder: Run subject parsing failed: %v", err)
			break
		}
		var req RunRequest
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("RunHandler: Run request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					innerResp, err := h.server.Run(ctx, req)
					if err != nil {
						return nil, err
					}
					return &innerResp, err
				})
			if replyError != nil {
				log.Printf("RunHandler: Run handler failed: %s", replyError.Error())
			}
		}
	default:
		log.Printf("HealthHandler: unknown name %q", name)
		replyError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}


	if !noreply {
		// encode and send response
		err = nrpc.Publish(resp, replyError, h.nc, msg.Reply, encoding) // error is logged
	} else {
		err = nil
	}
	if err != nil {
		log.Println("HealthHandler: Health handler failed to publish the response: %s", err)
	}
}

type HealthClient struct {
	nc      nrpc.NatsConn
	PkgSubject string
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewHealthClient(nc nrpc.NatsConn) *HealthClient {
	return &HealthClient{
		nc:      nc,
		PkgSubject: "github.xe.lokahi.admin",
		Subject: "Health",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *HealthClient) Run(req RunRequest) (resp ServiceHealth, err error) {

	subject := c.PkgSubject + "." + c.Subject + "." + "Run"

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

// WebhookServer is the interface that providers of the service
// Webhook should implement.
type WebhookServer interface {
	Execute(ctx context.Context, req WebhookRequest) (resp Nil, err error)
}

// WebhookHandler provides a NATS subscription handler that can serve a
// subscription using a given WebhookServer implementation.
type WebhookHandler struct {
	ctx    context.Context
	nc     nrpc.NatsConn
	server WebhookServer
}

func NewWebhookHandler(ctx context.Context, nc nrpc.NatsConn, s WebhookServer) *WebhookHandler {
	return &WebhookHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *WebhookHandler) Subject() string {
	return "github.xe.lokahi.admin.Webhook.>"
}

func (h *WebhookHandler) Handler(msg *nats.Msg) {
	var encoding string
	var noreply bool
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"github.xe.lokahi.admin", 0, "Webhook", 0, msg.Subject)
	if err != nil {
		log.Printf("WebhookHanlder: Webhook subject parsing failed: %v", err)
		return
	}

	ctx := h.ctx
	// call handler and form response
	var resp proto.Message
	var replyError *nrpc.Error
	switch name {
	case "Execute":
		_, encoding, err = nrpc.ParseSubjectTail(0, tail)
		if err != nil {
			log.Printf("ExecuteHanlder: Execute subject parsing failed: %v", err)
			break
		}
		var req WebhookRequest
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("ExecuteHandler: Execute request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					innerResp, err := h.server.Execute(ctx, req)
					if err != nil {
						return nil, err
					}
					return &innerResp, err
				})
			if replyError != nil {
				log.Printf("ExecuteHandler: Execute handler failed: %s", replyError.Error())
			}
		}
	default:
		log.Printf("WebhookHandler: unknown name %q", name)
		replyError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}


	if !noreply {
		// encode and send response
		err = nrpc.Publish(resp, replyError, h.nc, msg.Reply, encoding) // error is logged
	} else {
		err = nil
	}
	if err != nil {
		log.Println("WebhookHandler: Webhook handler failed to publish the response: %s", err)
	}
}

type WebhookClient struct {
	nc      nrpc.NatsConn
	PkgSubject string
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewWebhookClient(nc nrpc.NatsConn) *WebhookClient {
	return &WebhookClient{
		nc:      nc,
		PkgSubject: "github.xe.lokahi.admin",
		Subject: "Webhook",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *WebhookClient) Execute(req WebhookRequest) (resp Nil, err error) {

	subject := c.PkgSubject + "." + c.Subject + "." + "Execute"

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	pkgSubject string
	RunLocal *RunLocalClient
	Health *HealthClient
	Webhook *WebhookClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
		pkgSubject: "github.xe.lokahi.admin",
	}
	c.RunLocal = NewRunLocalClient(nc)
	c.Health = NewHealthClient(nc)
	c.Webhook = NewWebhookClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.RunLocal != nil {
		c.RunLocal.Encoding = encoding
	}
	if c.Health != nil {
		c.Health.Encoding = encoding
	}
	if c.Webhook != nil {
		c.Webhook.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.RunLocal != nil {
		c.RunLocal.Timeout = t
	}
	if c.Health != nil {
		c.Health.Timeout = t
	}
	if c.Webhook != nil {
		c.Webhook.Timeout = t
	}
}